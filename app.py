import streamlit as st
import pandas as pd
import re


#########################################################
# –§–£–ù–ö–¶–ò–ò
#########################################################

def parse_quantity(qty_str: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '100 –≥' –∏–ª–∏ '2 —à—Ç' –≤ (—á–∏—Å–ª–æ, –µ–¥–∏–Ω–∏—Ü–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (0.0, '') –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
    """
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip())
    if match:
        num = float(match.group(1))
        unit = match.group(2)
        return (num, unit)
    return (0.0, "")


@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π CSV (3 –∫–æ–ª–æ–Ω–∫–∏: –†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
    –∏ –Ω–∞ –ª–µ—Ç—É —Å–æ–∑–¥–∞—ë–º DataFrame —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
    [–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è].

    –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    # –®–∞–≥ 1: —á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π CSV
    df_old = pd.read_csv(csv_path)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    st.write("–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ CSV:", list(df_old.columns))

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
    df_old.columns = df_old.columns.str.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ [–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è] –µ—Å—Ç—å
    needed = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–ª–∏ `;`, –µ—Å–ª–∏ —Ç–∞–∫ —É —Ç–µ–±—è)
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä: '100 –≥', '2 —à—Ç', ...)
            quantity_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing)
            quantity = quantity_match.group(0) if quantity_match else ""

            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –æ—Ç (–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏ –∫–æ–ª-–≤–∞
            ing_clean = re.sub(r"\(.*?\)", "", ing)  # —É–±–∏—Ä–∞–µ–º (‚Ä¶)
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean)

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            ing_clean = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", ing_clean)
            ing_clean = re.sub(r"\s?\.\s?$", "", ing_clean)
            ing_clean = ing_clean.strip()

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π DataFrame
    df_new = pd.DataFrame(new_rows)

    # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    st.write("–ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", list(df_new.columns))
    st.dataframe(df_new.head(10))

    return df_new


def sum_ingredients(selected_df):
    """
    –°—É–º–º–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–∏—Å–ª–æ–≤—ã–µ).
    –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä—Å–∏–º –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '100 –≥'),
    –∑–∞—Ç–µ–º –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ [–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ï–¥–∏–Ω–∏—Ü–∞].
    """
    parsed_list = []
    for _, row in selected_df.iterrows():
        ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        num, unit = parse_quantity(qty_str)
        parsed_list.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit
        })

    tmp_df = pd.DataFrame(parsed_list)
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped


#########################################################
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
#########################################################

def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º CSV (3->5 –∫–æ–ª–æ–Ω–æ–∫)
    df = load_and_parse("recipes.csv")

    # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è (df –ø—É—Å—Ç) ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º
    if df.empty:
        return

    st.header("üîç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
    recipes_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã:", recipes_list)

    if selected:
        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame
        selected_df = df[df["–†–µ—Ü–µ–ø—Ç"].isin(selected)]

        # –°—É–º–º–∏—Ä—É–µ–º
        summed_df = sum_ingredients(selected_df)
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:")
        for _, row_sum in summed_df.iterrows():
            ing = row_sum["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            num = row_sum["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
            unit = row_sum["–ï–¥–∏–Ω–∏—Ü–∞"]
            if unit:
                st.markdown(f"- **{ing}**: {num} {unit}")
            else:
                st.markdown(f"- **{ing}**: {num}")
        st.write("---")

    st.header("üìã –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for recipe_name, group in grouped:
        st.markdown(f"## {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, row_ing in group.iterrows():
            ing = row_ing["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = row_ing["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            cat = row_ing["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]

            qty_part = f" ‚Äî {qty}" if qty else ""
            cat_part = f" ({cat})" if cat else ""
            st.markdown(f"- {ing}{qty_part}{cat_part}")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")


if __name__ == "__main__":
    main()
