import streamlit as st
import pandas as pd
import re

###########################################################
# –°–ò–ù–û–ù–ò–ú–´ –ò –ê–í–¢–û–ì–†–£–ü–ü–´
###########################################################
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",
}

AUTO_GROUPS = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",  # –¥–ª—è ¬´—è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª –∏ —Ç.–ø.
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",
}

###################################################################
def parse_quantity(qty_str: str):
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

def unify_ingredient_name(original_name: str) -> str:
    name = original_name.strip().lower()
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name.strip()

def auto_assign_group(ing_name: str) -> str:
    ing_lower = ing_name.lower()
    for key_sub, group_name in AUTO_GROUPS.items():
        if key_sub in ing_lower:
            return group_name
    return ""

@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –ø–æ–ª–µ ¬´–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã¬ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    #   [{–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ì—Ä—É–ø–ø–∞}, ...]
    # –ü–æ –æ–¥–Ω–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É -> –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞,
    # –Ω–æ, –µ—Å–ª–∏ CSV —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –ö–ê–ñ–î–´–ô –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ø—Ä–∏–¥—ë—Ç—Å—è —Å–ª–∏–≤–∞—Ç—å.
    # –û–¥–Ω–∞–∫–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö —É –Ω–∞—Å 1 —Ä–µ—Ü–µ–ø—Ç = –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫.
    # –¢–æ–≥–¥–∞ ¬´—Å–ª–∏–≤–∞—Ç—å¬ª –∏—Ö –ø–æ —Ä–µ—Ü–µ–ø—Ç—É.
    # –ò–õ–ò CSV –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ 3 —Å—Ç–æ–ª–±—Ü–∞,
    #   => parse -> –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫?
    #   => c–ª–∏–≤–∞–µ–º‚Ä¶

    # –ù–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –º—ã —É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–ª–∏.
    # –ó–¥–µ—Å—å —É–ø—Ä–æ—Å—Ç–∏–º: CSV (3 –∫–æ–ª–æ–Ω–∫–∏) -> parse ->
    #   ... Actually, user wants 1 row = 1 recipe.
    #   => –Ω–∞–º –Ω—É–∂–Ω–æ groupby recipe_name -> list of ingredients.

    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º ¬´—Å—Ç–∞—Ä—ã–π parse¬ª (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ) -> 1 —Å—Ç—Ä–æ–∫–∞:
    #   recipe_name | [ {ing, qty, group}, ... ] | –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ ¬´parse¬ª ingredient by line,
    #   –ø–æ—Ç–æ–º groupby.

    # 1) –ü–∞—Ä—Å–∏–º post-line
    parse_rows = []
    for idx, line in df_old.iterrows():
        rcp = line["–†–µ—Ü–µ–ø—Ç"].strip()
        instruction = line["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        lines_ing = str(line["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in lines_ing:
            if not ing.strip() or "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏" in ing.lower():
                continue
            qty_match = re.search(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = qty_match.group(0).strip() if qty_match else ""

            # group in parentheses?
            group_match = re.search(r"\((.*?)\)", ing)
            group_str = group_match.group(1) if group_match else ""

            # remove numeric from name but keep (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1) if present
            name_no_qty = re.sub(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing, flags=re.IGNORECASE)
            name_no_qty = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", name_no_qty)
            name_no_qty = re.sub(r"\s?\.\s?$", "", name_no_qty)
            name_no_qty = name_no_qty.strip()

            ing_clean = unify_ingredient_name(name_no_qty)
            group_str = group_str.lower()
            # If it contains "–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1" -> "—è–π—Ü–∞"
            if re.search(r"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\s*c\d", group_str, re.IGNORECASE):
                group_str = "—è–π—Ü–∞"
            if not group_str:
                group_str = auto_assign_group(ing_clean)

            parse_rows.append({
                "–†–µ—Ü–µ–ø—Ç": rcp,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": name_no_qty.strip(),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ì—Ä—É–ø–ø–∞": group_str.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    # –¢–µ–ø–µ—Ä—å parse_rows ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π. Groupby –ø–æ "–†–µ—Ü–µ–ø—Ç", —Å–ª–∏–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ list of dict
    parse_df = pd.DataFrame(parse_rows)
    if parse_df.empty:
        return pd.DataFrame()

    recipes = []
    grouped = parse_df.groupby("–†–µ—Ü–µ–ø—Ç")
    for rname, grp in grouped:
        # –°–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é)
        instr = grp["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"].iloc[0]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ì—Ä—É–ø–ø–∞}, ...]
        ing_list = grp[["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ì—Ä—É–ø–ø–∞"]].to_dict(orient="records")
        recipes.append({
            "–†–µ—Ü–µ–ø—Ç": rname,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": ing_list,  # c–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instr
        })

    final_df = pd.DataFrame(recipes)
    return final_df

###################################################################
def sum_ingredients(cart_df: pd.DataFrame):
    rows = []
    for _, row in cart_df.iterrows():
        recipe_name = row["–†–µ—Ü–µ–ø—Ç"]
        portions = row["–ü–æ—Ä—Ü–∏–∏"]
        ing_list = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]  # list of dict
        if not isinstance(ing_list, list):
            continue
        for ing_dict in ing_list:
            iname = ing_dict["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            grp = ing_dict["–ì—Ä—É–ø–ø–∞"]
            qty_str = ing_dict["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            base_q, unit = parse_quantity(qty_str)
            total = base_q * portions
            rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": iname,
                "–ì—Ä—É–ø–ø–∞": grp,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": total,
                "–ï–¥–∏–Ω–∏—Ü–∞": unit
            })
    tmp_df = pd.DataFrame(rows)
    if tmp_df.empty:
        return pd.DataFrame()
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ì—Ä—É–ø–ø–∞", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped

def add_recipe_to_cart(recipe_name, portions, df_parsed):
    if "cart" not in st.session_state:
        st.session_state["cart"] = pd.DataFrame(columns=["–†–µ—Ü–µ–ø—Ç","–ü–æ—Ä—Ü–∏–∏","–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON","–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    # –ù–∞–π–¥—ë–º —Å—Ç—Ä–æ–∫—É –≤ df_parsed
    row_data = df_parsed[df_parsed["–†–µ—Ü–µ–ø—Ç"] == recipe_name].iloc[0]
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ cart
    cart = st.session_state["cart"]
    existing_index = cart[cart["–†–µ—Ü–µ–ø—Ç"] == recipe_name].index
    if not existing_index.empty:
        # –ü—Ä–∏–±–∞–≤–∏–º –ø–æ—Ä—Ü–∏–∏
        idx = existing_index[0]
        st.session_state["cart"].loc[idx, "–ü–æ—Ä—Ü–∏–∏"] += portions
        st.success(f"–£ —Ä–µ—Ü–µ–ø—Ç–∞ ¬´{recipe_name}¬ª —Ç–µ–ø–µ—Ä—å {st.session_state['cart'].loc[idx, '–ü–æ—Ä—Ü–∏–∏']} –ø–æ—Ä—Ü–∏–π!")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        # row_data["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"] (list of dict)
        # row_data["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        new_df = pd.DataFrame([{
            "–†–µ—Ü–µ–ø—Ç": row_data["–†–µ—Ü–µ–ø—Ç"],
            "–ü–æ—Ä—Ü–∏–∏": portions,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": row_data["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"],
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": row_data["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        }])
        st.session_state["cart"] = pd.concat([st.session_state["cart"], new_df], ignore_index=True)
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç ¬´{recipe_name}¬ª x {portions} –ø–æ—Ä—Ü–∏–π!")

def remove_recipe_from_cart(recipe_name):
    if "cart" not in st.session_state:
        return
    st.session_state["cart"] = st.session_state["cart"][st.session_state["cart"]["–†–µ—Ü–µ–ø—Ç"] != recipe_name]

def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        st.write("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
        return

    #--- –ü–æ–∏—Å–∫
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ing_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:")
    if ing_search:
        # df: –†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        # –ù–∞–¥–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é JSON
        found_recipes = []
        for _, row in df.iterrows():
            ing_list = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
            for d in ing_list:
                if ing_search.lower() in d["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].lower():
                    found_recipes.append(row["–†–µ—Ü–µ–ø—Ç"])
                    break
        if found_recipes:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã —Å —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º:")
            for rcp in found_recipes:
                st.markdown(f"- **{rcp}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        st.write("---")

    #--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ (—Å —É—á—ë—Ç–æ–º –ø–æ—Ä—Ü–∏–π)")
    rec_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    recipe_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", [""] + list(rec_list))
    portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, max_value=50, value=1)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
        if recipe_choice:
            add_recipe_to_cart(recipe_choice, portions, df)

    #--- –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å–ø–∏—Å–æ–∫)")
    if "cart" not in st.session_state or st.session_state["cart"].empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    else:
        cart_df = st.session_state["cart"]
        for idx, row_c in cart_df.iterrows():
            rname = row_c["–†–µ—Ü–µ–ø—Ç"]
            pors = row_c["–ü–æ—Ä—Ü–∏–∏"]
            st.markdown(f"- **{rname}** (–ø–æ—Ä—Ü–∏–π: {pors})")
            if st.button(f"–£–¥–∞–ª–∏—Ç—å ¬´{rname}¬ª"):
                remove_recipe_from_cart(rname)
                st.success(f"¬´{rname}¬ª —É–¥–∞–ª—ë–Ω!")
                return
        st.write("---")

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        summed = sum_ingredients(cart_df)
        if not summed.empty:
            group_g = summed.groupby("–ì—Ä—É–ø–ø–∞")
            for grp_name in sorted(group_g.groups.keys()):
                sub_c = group_g.get_group(grp_name)
                st.markdown(f"#### {grp_name if grp_name else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}")
                for _, row_s in sub_c.iterrows():
                    iname = row_s["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                    num = row_s["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                    unit = row_s["–ï–¥–∏–Ω–∏—Ü–∞"]
                    line = f"- **{iname}**: {num} {unit}" if unit else f"- **{iname}**: {num}"
                    st.markdown(line)
        else:
            st.write("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        st.write("---")

    #--- –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
    st.header("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)")

    for _, row_d in df.iterrows():
        rname = row_d["–†–µ—Ü–µ–ø—Ç"]
        st.markdown(f"## {rname}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        ing_list = row_d["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
        for d in ing_list:
            iname = d["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = d["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            qpart = f" ‚Äî {qty}" if qty else ""
            st.markdown(f"- {iname}{qpart}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{row_d['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")

if __name__ == "__main__":
    main()
