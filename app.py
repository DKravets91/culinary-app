import streamlit as st
import pandas as pd
import re

#########################################################
# –®–ê–ì 1. –°–õ–û–í–ê–†–ò –î–õ–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò
#########################################################

# –°–∏–Ω–æ–Ω–∏–º—ã: –ø—Ä–∏–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "—è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)": "—è–π—Ü–∞",
    "—è–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ": "—è–π—Ü–∞",
    "—è–π—Ü–∞": "—è–π—Ü–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",  # –í auto_categories —É–∫–∞–∂–µ–º, —á—Ç–æ —ç—Ç–æ "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã"
}

# –ê–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É
AUTO_CATEGORIES = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",  # –ë—É–¥–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—Ç—å
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
}


#########################################################
# –ü–ê–†–°–ï–† –ö–û–õ–ò–ß–ï–°–¢–í–ê
#########################################################
def parse_quantity(qty_str: str):
    """
    '100 –≥' -> (100.0, '–≥')
    '2 —à—Ç' -> (2.0, '—à—Ç')
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî (0.0, '')
    """
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")


#########################################################
# –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê
#########################################################
def unify_ingredient_name(name: str):
    name = name.strip().lower()
    # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º "–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1" –∏ —Ç.–ø., –≤—ã—Ä–µ–∑–∞–µ–º —ç—Ç–æ
    name = re.sub(r"(–∫–∞—Ç–µ–≥–æ—Ä–∏—è\s*c\d)", "", name)
    # –£–±–∏—Ä–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name.strip()


#########################################################
# –ê–í–¢–û-–ü–û–î–°–¢–ê–í–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò
#########################################################
def auto_assign_category(ing: str):
    ing_lower = ing.lower()
    for key_sub, cat_name in AUTO_CATEGORIES.items():
        if key_sub in ing_lower:
            return cat_name
    return ""


#########################################################
# –ü–ê–†–°–ò–ú CSV (–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è) -> (–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
#########################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            ing_lower = ing.lower().strip()
            if not ing_lower or ing_lower == "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ—á–∫–∏ –∏ "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏"
                continue

            # 1) –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = quantity_match.group(0) if quantity_match else ""

            # 2) –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # 3) –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            ing_clean = re.sub(r"\(.*?\)", "", ing, flags=re.IGNORECASE)
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean, flags=re.IGNORECASE)
            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–∏—Ä–µ, —Ç–æ—á–∫–∏
            ing_clean = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", ing_clean)
            ing_clean = re.sub(r"\s?\.\s?$", "", ing_clean)
            ing_clean = ing_clean.strip()

            # 4) –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º (—è–π—Ü–æ -> —è–π—Ü–∞, –º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è -> –ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞, –∏ —Ç.–ø.)
            ing_clean = unify_ingredient_name(ing_clean)

            # 5) –ê–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤—ã—Ç–∞—â–µ–Ω–æ –∏–∑ —Å–∫–æ–±–æ–∫
            if not category:
                category = auto_assign_category(ing_clean)

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    return pd.DataFrame(new_rows)


#########################################################
# –°–£–ú–ú–ò–†–£–ï–ú –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´
#########################################################
def sum_ingredients(selected_df):
    parsed_list = []
    for _, row in selected_df.iterrows():
        ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        cat = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        num, unit = parse_quantity(qty_str)
        parsed_list.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit
        })
    tmp_df = pd.DataFrame(parsed_list)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ [–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ï–¥–∏–Ω–∏—Ü–∞]
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped


def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    # –ó–ê–ì–†–£–ó–ö–ê –∏ –ü–ê–†–°–ò–ù–ì
    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    # --- –ü–û–ò–°–ö –ü–û –ò–ù–ì–†–ï–î–ò–ï–ù–¢–£ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ingredient_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—è–π—Ü–∞' –∏–ª–∏ '–º–∞–∫'):")
    if ingredient_search:
        filtered = df[df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.contains(ingredient_search.lower(), case=False, na=False)]
        if not filtered.empty:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
            # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Ü–µ–ø—Ç—É
            for recipe_name in filtered["–†–µ—Ü–µ–ø—Ç"].unique():
                st.markdown(f"- **{recipe_name}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º.")
        st.write("---")

    # --- –í–´–ë–û–† –ù–ï–°–ö–û–õ–¨–ö–ò–• –†–ï–¶–ï–ü–¢–û–í –î–õ–Ø –°–£–ú–ú–ò–†–û–í–ê–ù–ò–Ø
    st.header("–°—É–º–º–∞—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    recipes_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã:", recipes_list)

    if selected:

