import streamlit as st
import pandas as pd
import re

################################################################
# –°–ò–ù–û–ù–ò–ú–´ –ò –ê–í–¢–û–ì–†–£–ü–ü–´
################################################################
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

AUTO_GROUPS = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",         # ¬´–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª => "—è–π—Ü–∞"
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
}

################################################################
# parse_quantity : "100 –≥" -> (100.0, "–≥")
################################################################
def parse_quantity(qty_str: str):
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

################################################################
# unify_ingredient_name
################################################################
def unify_ingredient_name(ing: str) -> str:
    ing = ing.strip().lower()
    if ing in SYNONYMS:
        ing = SYNONYMS[ing]
    return ing.strip()

################################################################
# auto_assign_group
################################################################
def auto_assign_group(ing: str) -> str:
    ing_lower = ing.lower()
    for key_sub, group_name in AUTO_GROUPS.items():
        if key_sub in ing_lower:
            return group_name
    return ""

################################################################
# load_and_parse : CSV (3 cols) -> dataframe (1 row = 1 recipe + JSON ingredients)
################################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    parse_rows = []
    for _, row in df_old.iterrows():
        recipe_name = row["–†–µ—Ü–µ–ø—Ç"].strip()
        instruction = row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        ing_lines = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")
        for line in ing_lines:
            line = line.strip()
            if not line or "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏" in line.lower():
                continue

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_match = re.search(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", line, re.IGNORECASE)
            quantity = qty_match.group(0).strip() if qty_match else ""

            # –£–±–∏—Ä–∞–µ–º numeric –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–µ —É–¥–∞–ª—è–µ–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)
            name_no_qty = re.sub(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", line, flags=re.IGNORECASE)
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–∏—Ä–µ, —Ç–æ—á–∫–∏
            name_no_qty = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", name_no_qty)
            name_no_qty = re.sub(r"\s?\.\s?$", "", name_no_qty)
            name_no_qty = name_no_qty.strip()

            # unify / auto group
            ing_clean = unify_ingredient_name(name_no_qty)
            grp = auto_assign_group(ing_clean)

            parse_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": name_no_qty,   # –û—Ä–∏–≥–∏–Ω–∞–ª
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                "–ì—Ä—É–ø–ø–∞": grp,
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    if not parse_rows:
        return pd.DataFrame()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º post-parse -> 1 —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç
    df_parsed = pd.DataFrame(parse_rows)
    final_list = []
    grouped = df_parsed.groupby("–†–µ—Ü–µ–ø—Ç")
    for rcp, sub in grouped:
        instruct = sub["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"].iloc[0]
        ing_list = sub[["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ì—Ä—É–ø–ø–∞"]].to_dict(orient="records")
        final_list.append({
            "–†–µ—Ü–µ–ø—Ç": rcp,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": ing_list,
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruct
        })

    return pd.DataFrame(final_list)

################################################################
# sum_ingredients : –±–µ—Ä—ë–º cart, —É–º–Ω–æ–∂–∞–µ–º qty * –ü–æ—Ä—Ü–∏–∏
################################################################
def sum_ingredients(cart_df: pd.DataFrame):
    rows = []
    for _, c_row in cart_df.iterrows():
        rcp = c_row["–†–µ—Ü–µ–ø—Ç"]
        pors = c_row["–ü–æ—Ä—Ü–∏–∏"]
        ing_list = c_row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
        if not isinstance(ing_list, list):
            continue

        for item in ing_list:
            iname = item["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            grp = item["–ì—Ä—É–ø–ø–∞"]
            qty_str = item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            base, unit = parse_quantity(qty_str)
            total = base * pors  # <-- —É–º–Ω–æ–∂–∞–µ–º
            rows.append({
                "–†–µ—Ü–µ–ø—Ç": rcp,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": iname,
                "–ì—Ä—É–ø–ø–∞": grp,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": total,
                "–ï–¥–∏–Ω–∏—Ü–∞": unit
            })
    if not rows:
        return pd.DataFrame()
    outdf = pd.DataFrame(rows)
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    outdf = outdf.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ì—Ä—É–ø–ø–∞","–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return outdf

################################################################
# add_recipe_to_cart
################################################################
def add_recipe_to_cart(recipe_name, portions, df_parsed):
    if "cart" not in st.session_state:
        st.session_state["cart"] = pd.DataFrame(columns=["–†–µ—Ü–µ–ø—Ç","–ü–æ—Ä—Ü–∏–∏","–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON","–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ df_parsed
    row_df = df_parsed[df_parsed["–†–µ—Ü–µ–ø—Ç"] == recipe_name]
    if row_df.empty:
        st.error("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    row = row_df.iloc[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ
    cart = st.session_state["cart"]
    exist_idx = cart[cart["–†–µ—Ü–µ–ø—Ç"] == recipe_name].index
    if len(exist_idx) > 0:
        # —É–∂–µ –µ—Å—Ç—å -> —É–≤–µ–ª–∏—á–∏–º
        idx = exist_idx[0]
        old_pors = cart.loc[idx, "–ü–æ—Ä—Ü–∏–∏"]
        new_pors = old_pors + portions
        st.session_state["cart"].loc[idx, "–ü–æ—Ä—Ü–∏–∏"] = new_pors
        st.success(f"–£ ¬´{recipe_name}¬ª —Ç–µ–ø–µ—Ä—å {new_pors} –ø–æ—Ä—Ü–∏–π!")
    else:
        # –¥–æ–±–∞–≤–ª—è–µ–º
        new_df = pd.DataFrame([{
            "–†–µ—Ü–µ–ø—Ç": row["–†–µ—Ü–µ–ø—Ç"],
            "–ü–æ—Ä—Ü–∏–∏": portions,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"],
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        }])
        st.session_state["cart"] = pd.concat([st.session_state["cart"], new_df], ignore_index=True)
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç ¬´{recipe_name}¬ª x {portions} –ø–æ—Ä—Ü–∏–π!")

def remove_recipe_from_cart(recipe_name):
    if "cart" not in st.session_state:
        return
    st.session_state["cart"] = st.session_state["cart"][st.session_state["cart"]["–†–µ—Ü–µ–ø—Ç"] != recipe_name]

################################################################
def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        st.write("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
        return

    #=== –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ing_s = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
    if ing_s:
        found = []
        for _, rowx in df.iterrows():
            ings = rowx["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
            if not isinstance(ings, list):
                continue
            for item in ings:
                if ing_s.lower() in item["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].lower():
                    found.append(rowx["–†–µ—Ü–µ–ø—Ç"])
                    break
        if found:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
            for rc in found:
                st.markdown(f"- **{rc}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        st.write("---")

    #=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã (—Å —É—á—ë—Ç–æ–º –ø–æ—Ä—Ü–∏–π)")
    rec_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    recipe_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", [""]+list(rec_list))
    portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, max_value=50, value=1)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
        if recipe_choice:
            add_recipe_to_cart(recipe_choice, portions, df)

    #=== –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å–ø–∏—Å–æ–∫)")
    if "cart" not in st.session_state or st.session_state["cart"].empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    else:
        cart_df = st.session_state["cart"]
        for idx, crow in cart_df.iterrows():
            rname = crow["–†–µ—Ü–µ–ø—Ç"]
            pors = crow["–ü–æ—Ä—Ü–∏–∏"]
            st.markdown(f"- **{rname}** (–ø–æ—Ä—Ü–∏–π: {pors})")
            if st.button(f"–£–¥–∞–ª–∏—Ç—å ¬´{rname}¬ª"):
                remove_recipe_from_cart(rname)
                st.success(f"¬´{rname}¬ª —É–¥–∞–ª—ë–Ω!")
                return
        st.write("---")

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        summ = sum_ingredients(cart_df)
        if not summ.empty:
            group_g = summ.groupby("–ì—Ä—É–ø–ø–∞")
            for grp_name in sorted(group_g.groups.keys()):
                subcat = group_g.get_group(grp_name)
                st.markdown(f"#### {grp_name if grp_name else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}")
                for _, r2 in subcat.iterrows():
                    iname = r2["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                    num = r2["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                    unit = r2["–ï–¥–∏–Ω–∏—Ü–∞"]
                    line = f"- **{iname}**: {num} {unit}" if unit else f"- **{iname}**: {num}"
                    st.markdown(line)
        else:
            st.write("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        st.write("---")

    #=== –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
    st.header("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
    for _, rrow in df.iterrows():
        rnm = rrow["–†–µ—Ü–µ–ø—Ç"]
        st.markdown(f"## {rnm}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        ings = rrow["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
        if isinstance(ings, list):
            for item in ings:
                name_i = item["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                qty_i = item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                qpart = f" ‚Äî {qty_i}" if qty_i else ""
                st.markdown(f"- {name_i}{qpart}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{rrow['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")

if __name__ == "__main__":
    main()
