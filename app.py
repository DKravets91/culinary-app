import streamlit as st
import pandas as pd
import re


@st.cache_data
def load_and_parse(csv_path):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe = row["–†–µ—Ü–µ–ø—Ç"].strip()
        instruction = row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ '\n'
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing)
            quantity = quantity_match.group(0) if quantity_match else ""

            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            ing_clean = re.sub(r"\(.*?\)", "", ing)  # —É–±–∏—Ä–∞–µ–º (‚Ä¶)
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean)
            ing_clean = ing_clean.strip(" -")

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean.strip(),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    return pd.DataFrame(new_rows)


def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    st.header("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ingredient_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    if ingredient_search:
        filtered = df[df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.contains(ingredient_search, case=False, na=False)]
        if not filtered.empty:
            st.subheader("üçΩÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
            grouped = filtered.groupby("–†–µ—Ü–µ–ø—Ç")
            for recipe_name, group in grouped:
                st.markdown(f"## {recipe_name}")
                st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
                for _, row in group.iterrows():
                    ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                    qty = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                    cat = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
                    qty_part = f" ‚Äî {qty}" if qty else ""
                    cat_part = f" ({cat})" if cat else ""

                    st.markdown(f"- {ing}{qty_part}{cat_part}")

                st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        else:
            st.write("üòî –†–µ—Ü–µ–ø—Ç—ã —Å —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.header("üìã –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    all_grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for recipe_name, group in all_grouped:
        st.markdown(f"### {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, row in group.iterrows():
            ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            cat = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
            qty_part = f" ‚Äî {qty}" if qty else ""
            cat_part = f" ({cat})" if cat else ""

            st.markdown(f"- {ing}{qty_part}{cat_part}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")


if __name__ == "__main__":
    main()
