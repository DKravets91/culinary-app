import streamlit as st
import pandas as pd
import re

###################################################################
# –°–ò–ù–û–ù–ò–ú–´ –ò –ê–í–¢–û–ì–†–£–ü–ü–´
###################################################################
SYNONYMS = {
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",
}

AUTO_GROUPS = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",       # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º ¬´—è–π—Ü¬ª (–≤ —Ç.—á. ¬´—è–π—Ü–∞¬ª, ¬´—è–π—Ü–æ¬ª), —Å—Ç–∞–≤–∏–º –≥—Ä—É–ø–ø—É ¬´—è–π—Ü–∞¬ª
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
}

###################################################################
def parse_quantity(qty_str: str):
    """
    '100 –≥' -> (100.0, '–≥')
    '2 —à—Ç' -> (2.0, '—à—Ç')
    """
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

###################################################################
def unify_ingredient_name(original_name: str):
    """
    –û—á–∏—â–∞–µ–º ¬´(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º.
    –ù–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª –æ—Å—Ç–∞–≤–∏—Ç—å.
    –¢–æ–≥–¥–∞ –º—ã –∏—Ö –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ–Ω–∏–º —Å–∏–Ω–æ–Ω–∏–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤—Å–µ–º –≤—ã—Ä–µ–∑–∞—Ç—å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1) –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    # original_name = re.sub(r"\(–∫–∞—Ç–µ–≥–æ—Ä–∏—è\s*c\d\)", "", original_name, flags=re.IGNORECASE)
    # original_name = re.sub(r"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\s*c\d", "", original_name, flags=re.IGNORECASE)
    name = original_name.strip().lower()
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name.strip()

###################################################################
def auto_assign_group(ing_name: str) -> str:
    """
    –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ AUTO_GROUPS.
    –ï—Å–ª–∏ ing_name —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´—è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª, –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å ¬´—è–π—Ü¬ª, –∑–Ω–∞—á–∏—Ç ¬´—è–π—Ü–∞¬ª.
    """
    ing_lower = ing_name.lower()
    for key_sub, group_name in AUTO_GROUPS.items():
        if key_sub in ing_lower:
            return group_name
    return ""

###################################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        ing_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ing_list:
            ing_lower = ing.lower().strip()
            if not ing_lower or "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏" in ing_lower:
                continue

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = qty_match.group(0) if qty_match else ""

            # –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —Å–∫–æ–±–æ–∫ ‚Äî –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ (–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã) –∏ —Ç.–ø.
            group_match = re.search(r"\((.*?)\)", ing)
            group_str = group_match.group(1) if group_match else ""

            # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1) –µ—Å–ª–∏ –µ—Å—Ç—å
            name_no_qty = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing, flags=re.IGNORECASE)
            name_no_qty = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", name_no_qty)
            name_no_qty = re.sub(r"\s?\.\s?$", "", name_no_qty)
            name_no_qty = name_no_qty.strip()

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
            ing_clean = unify_ingredient_name(name_no_qty)

            # –ï—Å–ª–∏ group_str –Ω–µ –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ auto_assign
            if not group_str:
                group_str = auto_assign_group(ing_clean)

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": name_no_qty.strip(),  # –û–†–ò–ì–ò–ù–ê–õ, –≤–∫–ª—é—á–∞—è ¬´(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ì—Ä—É–ø–ø–∞": group_str.strip().lower(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    df_new = pd.DataFrame(new_rows)
    return df_new

###################################################################
def sum_ingredients(selected_df: pd.DataFrame):
    rows = []
    for _, row in selected_df.iterrows():
        orig_name = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        grp = row["–ì—Ä—É–ø–ø–∞"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        num, unit = parse_quantity(qty_str)
        rows.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": orig_name,
            "–ì—Ä—É–ø–ø–∞": grp,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit
        })
    tmp_df = pd.DataFrame(rows)
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ì—Ä—É–ø–ø–∞", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped

###################################################################
def add_recipe_to_cart(recipe_name, portions, df_parsed):
    if "cart" not in st.session_state:
        # ¬´–ü–æ—Ä—Ü–∏–∏¬ª —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
        st.session_state["cart"] = pd.DataFrame(columns=["–†–µ—Ü–µ–ø—Ç","–ü–æ—Ä—Ü–∏–∏","–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ì—Ä—É–ø–ø–∞","–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    selected_rows = df_parsed[df_parsed["–†–µ—Ü–µ–ø—Ç"] == recipe_name]
    if selected_rows.empty:
        return

    # –£ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ cart –±—É–¥–µ—Ç —Å–≤–æ—è ¬´–ü–æ—Ä—Ü–∏–∏¬ª
    extended = selected_rows.copy()
    extended["–ü–æ—Ä—Ü–∏–∏"] = portions
    st.session_state["cart"] = pd.concat([st.session_state["cart"], extended], ignore_index=True)

def remove_recipe_from_cart(recipe_name):
    if "cart" not in st.session_state:
        return
    st.session_state["cart"] = st.session_state["cart"][st.session_state["cart"]["–†–µ—Ü–µ–ø—Ç"] != recipe_name]

###################################################################
def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    #--- –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ing_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:")
    if ing_search:
        found = df[df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.contains(ing_search.lower(), case=False, na=False)]
        if not found.empty:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
            for rcp in found["–†–µ—Ü–µ–ø—Ç"].unique():
                st.markdown(f"- **{rcp}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º.")
        st.write("---")

    #--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ (—Å —É—á—ë—Ç–æ–º –ø–æ—Ä—Ü–∏–π)")
    rec_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    recipe_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", [""] + rec_list)
    portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, max_value=50, value=1)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
        if recipe_choice:
            add_recipe_to_cart(recipe_choice, portions, df)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç: {recipe_choice} x {portions} –ø–æ—Ä—Ü–∏–π!")

    #--- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å–ø–∏—Å–æ–∫)")
    if "cart" not in st.session_state or st.session_state["cart"].empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    else:
        cart_df = st.session_state["cart"]
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Ü–µ–ø—Ç—É, —Å—É–º–º–∏—Ä—É–µ–º ¬´–ü–æ—Ä—Ü–∏–∏¬ª
        recipe_groups = cart_df.groupby("–†–µ—Ü–µ–ø—Ç")["–ü–æ—Ä—Ü–∏–∏"].sum().reset_index()
        for _, r_row in recipe_groups.iterrows():
            rcp_name = r_row["–†–µ—Ü–µ–ø—Ç"]
            sum_portions = r_row["P–æ—Ä—Ü–∏–∏"]  # check the column name carefully
            st.markdown(f"- **{rcp_name}** (–≤—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {sum_portions})")
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            if st.button(f"–£–¥–∞–ª–∏—Ç—å ¬´{rcp_name}¬ª"):
                remove_recipe_from_cart(rcp_name)
                st.success(f"¬´{rcp_name}¬ª —É–¥–∞–ª—ë–Ω!")
                return  # –≤—ã—Ö–æ–¥–∏–º, –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º

        st.write("---")

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        summed = sum_ingredients(cart_df)
        grouped = summed.groupby("–ì—Ä—É–ø–ø–∞")
        for grp_name in sorted(grouped.groups.keys()):
            sub_cat = grouped.get_group(grp_name)
            st.markdown(f"#### {grp_name if grp_name else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}")
            for _, row_s in sub_cat.iterrows():
                ing = row_s["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                num = row_s["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                unit = row_s["–ï–¥–∏–Ω–∏—Ü–∞"]
                if unit:
                    st.markdown(f"- **{ing}**: {num} {unit}")
                else:
                    st.markdown(f"- **{ing}**: {num}")
        st.write("---")

    #--- –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
    st.header("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
    grouped_df = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for rname, group in grouped_df:
        st.markdown(f"## {rname}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, r_ing in group.iterrows():
            ing = r_ing["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = r_ing["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            qpart = f" ‚Äî {qty}" if qty else ""
            st.markdown(f"- {ing}{qpart}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")


if __name__ == "__main__":
    main()
