import streamlit as st
import pandas as pd
import re

#########################################################
# –°–õ–û–í–ê–†–¨ –°–ò–ù–û–ù–ò–ú–û–í –î–õ–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò
#########################################################
# –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º CSV –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞,
# –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å—é–¥–∞. –ö–ª—é—á -> –ø–∏—à–µ–º —Ç–æ, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è,
# –∑–Ω–∞—á–µ–Ω–∏–µ -> –∫ —á–µ–º—É –ø—Ä–∏–≤–æ–¥–∏–º.
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º
}

#########################################################
# –°–õ–û–í–ê–†–¨ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ö–ê–¢–ï–ì–û–†–ò–ô
#########################################################
# –ö–ª—é—á -> –ø–æ–¥—Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞,
#         –∑–Ω–∞—á–∏—Ç —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
# –ó–Ω–∞—á–µ–Ω–∏–µ -> —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
AUTO_CATEGORIES = {
    "—Ç–≤–æ—Ä–æ–≥": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–°—ã—Ä—ã",
    "—è–π—Ü": "–Ø–π—Ü–∞",  # "—è–π—Ü–æ", "—è–π—Ü–∞"
    "–º—É–∫–∞": "–ú—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–ú—É–∫–∞ –∏ –∑–ª–∞–∫–∏",  # –∏–ª–∏ "–ö—Ä–∞—Ö–º–∞–ª—ã", –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    "—É–∫—Ä–æ–ø": "–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à–Ω": "–Ø–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "—Å–∞—Ö–∞—Ä": "–°–∞—Ö–∞—Ä –∏ –ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª–∏",
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º
}


#########################################################
# –§–£–ù–ö–¶–ò–ò
#########################################################
def parse_quantity(qty_str: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '100 –≥' –∏–ª–∏ '2 —à—Ç' –≤ (—á–∏—Å–ª–æ, –µ–¥–∏–Ω–∏—Ü–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (0.0, '') –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
    """
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2)
        return (num, unit.lower())
    return (0.0, "")


def unify_ingredient_name(name: str):
    """
    –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ.
    –ï—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ SYNONYMS –µ—Å—Ç—å —Ç–∞–∫–æ–π –∫–ª—é—á, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é.
    """
    name = name.strip().lower()
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name


def auto_assign_category(ing: str):
    """
    –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ—ë –ø–æ —Å–ª–æ–≤–∞—Ä—é AUTO_CATEGORIES.
    –ü–æ–∏—Å–∫ –¥–µ–ª–∞–µ–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ.
    """
    ing_lower = ing.lower()
    for key_sub, cat_name in AUTO_CATEGORIES.items():
        if key_sub in ing_lower:
            return cat_name
    return ""


@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π CSV (–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
    –∏ –Ω–∞ –ª–µ—Ç—É —Å–æ–∑–¥–∞—ë–º DataFrame: [–†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è].
    –ë–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
    """
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            # 1) –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = quantity_match.group(0) if quantity_match else ""

            # 2) –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö (–µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞)
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # 3) –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            ing_clean = re.sub(r"\(.*?\)", "", ing)  # —É–±–∏—Ä–∞–µ–º (‚Ä¶)
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean, flags=re.IGNORECASE)
            # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            ing_clean = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", ing_clean)
            ing_clean = re.sub(r"\s?\.\s?$", "", ing_clean)
            ing_clean = ing_clean.strip()

            # 4) –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—é (—á–µ—Ä–µ–∑ SYNONYMS)
            ing_clean = unify_ingredient_name(ing_clean)

            # 5) –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if not category:
                category = auto_assign_category(ing_clean)

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean,  # —É–∂–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    return pd.DataFrame(new_rows)


def sum_ingredients(selected_df):
    """
    –°—É–º–º–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–∏—Å–ª–æ–≤—ã–µ).
    """
    parsed_list = []
    for _, row in selected_df.iterrows():
        ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        num, unit = parse_quantity(qty_str)
        parsed_list.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit,
        })
    tmp_df = pd.DataFrame(parsed_list)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ [–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ï–¥–∏–Ω–∏—Ü–∞]
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()

    return grouped


def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º CSV
    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    # ============ –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ============
    st.header("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
    recipes_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã:", recipes_list)

    if selected:
        selected_df = df[df["–†–µ—Ü–µ–ø—Ç"].isin(selected)]
        # –°—É–º–º–∏—Ä—É–µ–º
        summed_df = sum_ingredients(selected_df)
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:")
        for _, row_sum in summed_df.iterrows():
            ing = row_sum["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            num = row_sum["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
            unit = row_sum["–ï–¥–∏–Ω–∏—Ü–∞"]
            if unit:
                st.markdown(f"- **{ing}**: {num} {unit}")
            else:
                st.markdown(f"- **{ing}**: {num}")
        st.write("---")

    # ============ –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ============
    st.header("üìã –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")

    for recipe_name, group in grouped:
        st.markdown(f"## {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):**")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        cat_grouped = group.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for cat_name in sorted(cat_grouped.groups.keys()):
            st.write(f"### {cat_name if cat_name else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}")
            sub = cat_grouped.get_group(cat_name)
            for _, row_ing in sub.iterrows():
                ing = row_ing["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                qty = row_ing["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                qty_part = f" ‚Äî {qty}" if qty else ""
                st.markdown(f"- {ing}{qty_part}")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")


if __name__ == "__main__":
    main()
