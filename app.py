import streamlit as st
import pandas as pd
import re

###########################################################
# –°–ò–ù–û–ù–ò–ú–´ –ò –ê–í–¢–û–ì–†–£–ü–ü–´
###########################################################
SYNONYMS = {
    # –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",
    # –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å "–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ" -> "–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –°1)", –¥–æ–±–∞–≤—å—Ç–µ
}

AUTO_GROUPS = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",    # –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å "—è–π—Ü", —Å—Ç–∞–≤–∏–º –≥—Ä—É–ø–ø—É "—è–π—Ü–∞"
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
}

###########################################################
# –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: "100 –≥" -> (100, "–≥")
###########################################################
def parse_quantity(qty_str: str):
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

###########################################################
# –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–∫—Ä–æ–º–µ "—è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –°1)")
###########################################################
def unify_ingredient_name(original_name: str):
    """
    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã '—è–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ' —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å '–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –°1)', –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–¥–µ—Å—å.
    –ù–æ —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —è–∏—Ü, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º '(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)'.
    """
    name = original_name.strip().lower()
    # –ü—Ä–∏–º–µ–Ω–∏–º —Å–ª–æ–≤–∞—Ä—å SYNONYMS
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name.strip()

###########################################################
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã (—Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–ø–ø–∞")
###########################################################
def auto_assign_group(ing: str) -> str:
    ing_lower = ing.lower()
    for key_sub, group_name in AUTO_GROUPS.items():
        if key_sub in ing_lower:
            return group_name
    return ""

###########################################################
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ CSV (3 –∫–æ–ª–æ–Ω–∫–∏ -> 5 –∫–æ–ª–æ–Ω–∫–∏)
###########################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            ing_low = ing.lower().strip()
            if not ing_low or "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏" in ing_low:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ ¬´–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏¬ª
                continue

            # –í—ã–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = qty_match.group(0) if qty_match else ""

            # –ì—Ä—É–ø–ø–∞ –∏–∑ —Å–∫–æ–±–æ–∫? (–¥–ª—è —è–∏—Ü (–∫–∞—Ç–µ–≥–æ—Ä–∏—è C1) –Ω–µ –±—É–¥–µ–º –ª–æ–º–∞—Ç—å)
            group_match = re.search(r"\((.*?)\)", ing)
            group_str = group_match.group(1) if group_match else ""

            # –û—á–∏—Å—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ (—É–±–µ—Ä—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º '(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)' –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
            # –ò–ª–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±–∏—Ä–∞—Ç—å '(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)' ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
            # ing_clean = re.sub(r"\(.*?\)", "", ing, flags=re.IGNORECASE)
            # –ù–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏ "–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –°1)" ‚Äî –ø—É—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing, flags=re.IGNORECASE)
            ing_clean = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", ing_clean)
            ing_clean = re.sub(r"\s?\.\s?$", "", ing_clean)
            ing_clean = ing_clean.strip()

            ing_clean = unify_ingredient_name(ing_clean)

            # –ï—Å–ª–∏ group_str –Ω–µ –∑–∞–¥–∞–Ω–∞, –¥–µ–ª–∞–µ–º auto_assign
            if not group_str:
                group_str = auto_assign_group(ing_clean)

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean,    # –°–æ—Ö—Ä–∞–Ω—è–µ–º "–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –°1)" –µ—Å–ª–∏ —Ç–∞–∫ –±—ã–ª–æ
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ì—Ä—É–ø–ø–∞": group_str.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    return pd.DataFrame(new_rows)

###########################################################
# –°—É–º–º–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—É—á–∏—Ç—ã–≤–∞—è "–ì—Ä—É–ø–ø–∞")
###########################################################
def sum_ingredients(selected_df: pd.DataFrame) -> pd.DataFrame:
    rows = []
    for _, row in selected_df.iterrows():
        ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        grp = row["–ì—Ä—É–ø–ø–∞"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        num, unit = parse_quantity(qty_str)
        rows.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing,
            "–ì—Ä—É–ø–ø–∞": grp,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit
        })
    tmp_df = pd.DataFrame(rows)
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º (–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ì—Ä—É–ø–ø–∞, –ï–¥–∏–Ω–∏—Ü–∞)
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ì—Ä—É–ø–ø–∞", "–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped

###########################################################
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É + –ø–æ–ª–µ "–ü–æ—Ä—Ü–∏–∏"
###########################################################
def add_recipe_to_cart(recipe_name, portions, df_parsed):
    if "cart" not in st.session_state:
        st.session_state["cart"] = pd.DataFrame(columns=["–†–µ—Ü–µ–ø—Ç", "–ü–æ—Ä—Ü–∏–∏", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ì—Ä—É–ø–ø–∞", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    selected_rows = df_parsed[df_parsed["–†–µ—Ü–µ–ø—Ç"] == recipe_name]
    if selected_rows.empty:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ü–æ—Ä—Ü–∏–∏" –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    extended = selected_rows.copy()
    extended["–ü–æ—Ä—Ü–∏–∏"] = portions

    # –°–∫–ª–∞–¥—ã–≤–∞–µ–º
    st.session_state["cart"] = pd.concat([st.session_state["cart"], extended], ignore_index=True)

def remove_recipe_from_cart(recipe_name):
    """–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É"""
    if "cart" not in st.session_state:
        return
    # –£–¥–∞–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    st.session_state["cart"] = st.session_state["cart"][st.session_state["cart"]["–†–µ—Ü–µ–ø—Ç"] != recipe_name]

###########################################################
def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    ###################################################################
    # –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    ###################################################################
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ingredient_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:")
    if ingredient_search:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        filtered = df[df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.contains(ingredient_search.lower(), case=False, na=False)]
        if not filtered.empty:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
            for rcp in filtered["–†–µ—Ü–µ–ø—Ç"].unique():
                st.markdown(f"- **{rcp}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º.")
        st.write("---")

    ###################################################################
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –ø–æ—Ä—Ü–∏—è–º–∏
    ###################################################################
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ (—Å —É—á—ë—Ç–æ–º –ø–æ—Ä—Ü–∏–π)")
    recipes_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    recipe_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", ["" ]+ recipes_list)
    portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, max_value=50, value=1)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
        if recipe_choice:
            add_recipe_to_cart(recipe_choice, portions, df)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç: {recipe_choice} x {portions} –ø–æ—Ä—Ü–∏–π!")

    ###################################################################
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
    ###################################################################
    st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å–ø–∏—Å–æ–∫)")
    if "cart" not in st.session_state or st.session_state["cart"].empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    else:
        # –ü–æ–∫–∞–∂–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤—ã–±–æ—Ä–æ–º
        cart_df = st.session_state["cart"]
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞, –≤—ã–≤–æ–¥–∏–º —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
        grouped_recipes = cart_df.groupby("–†–µ—Ü–µ–ø—Ç")["–ü–æ—Ä—Ü–∏–∏"].sum().reset_index()
        for idx, row_r in grouped_recipes.iterrows():
            rec_name = row_r["–†–µ—Ü–µ–ø—Ç"]
            total_portions = row_r["–ü–æ—Ä—Ü–∏–∏"]
            st.markdown(f"- **{rec_name}** (–≤—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total_portions})")
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å
            if st.button(f"–£–¥–∞–ª–∏—Ç—å ¬´{rec_name}¬ª"):
                remove_recipe_from_cart(rec_name)
                # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º rerun, —á—Ç–æ–± –Ω–µ –ø–∞–¥–∞–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é.
                st.success(f"¬´{rec_name}¬ª —É–¥–∞–ª—ë–Ω!")
                return  # –≤—ã–π–¥–µ–º –∏–∑ main(), –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–Ω–¥–µ—Ä–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è

        st.write("---")

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        final_df = sum_ingredients(cart_df)
        grp_grouped = final_df.groupby("–ì—Ä—É–ø–ø–∞")
        for grp_name in sorted(grp_grouped.groups.keys()):
            sub_cat = grp_grouped.get_group(grp_name)
            st.markdown(f"#### {grp_name if grp_name else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}")
            for _, row_s in sub_cat.iterrows():
                ing = row_s["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                num = row_s["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                unit = row_s["–ï–¥–∏–Ω–∏—Ü–∞"]
                if unit:
                    st.markdown(f"- **{ing}**: {num} {unit}")
                else:
                    st.markdown(f"- **{ing}**: {num}")
        st.write("---")

    ###################################################################
    # –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
    ###################################################################
    st.header("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
    grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for recipe_name, group in grouped:
        st.markdown(f"## {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, row_ing in group.iterrows():
            ing = row_ing["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = row_ing["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            qty_part = f" ‚Äî {qty}" if qty else ""
            st.markdown(f"- {ing}{qty_part}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")

if __name__ == "__main__":
    main()
