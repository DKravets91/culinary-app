import streamlit as st
import pandas as pd
import re

######################################################
# –°–ò–ù–û–ù–ò–ú–´ –ò –ê–í–¢–û–ì–†–£–ü–ü–´
######################################################
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–≤–∞–Ω–∏–ª—å –ø–æ –∂–µ–ª–∞–Ω–∏—é": "–≤–∞–Ω–∏–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤",
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω—è–π—Ç–µ
}

AUTO_GROUPS = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—è–π—Ü": "—è–π—Ü–∞",         # ¬´–Ø–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª => –≤—Å—ë —Ä–∞–≤–Ω–æ ¬´—è–π—Ü–∞¬ª
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–º–∏–∫—Å —Å—É—à—ë–Ω—ã—Ö —Ç—Ä–∞–≤": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∏—à": "—è–≥–æ–¥—ã",
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
    "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏": "",     # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
}

######################################################
# parse_quantity : "100 –≥" -> (100, "–≥")
######################################################
def parse_quantity(qty_str: str):
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

######################################################
# unify_ingredient_name : –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —Å–∏–Ω–æ–Ω–∏–º—ã
######################################################
def unify_ingredient_name(name: str) -> str:
    name = name.strip().lower()
    if name in SYNONYMS:
        name = SYNONYMS[name]
    return name.strip()

######################################################
# auto_assign_group : –ø–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ AUTO_GROUPS
######################################################
def auto_assign_group(ing_name: str) -> str:
    ing_lower = ing_name.lower()
    for key_sub, group in AUTO_GROUPS.items():
        if key_sub in ing_lower:
            return group
    return ""

######################################################
# load_and_parse : –∑–∞–≥—Ä—É–∂–∞–µ–º CSV (3 –∫–æ–ª–æ–Ω–∫–∏),
#   parse –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö \n),
#   s–ª–∏–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ JSON
#   (recipe -> 1 —Å—Ç—Ä–æ–∫–∞).
######################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_raw = pd.read_csv(csv_path)
    df_raw.columns = df_raw.columns.str.strip()

    needed = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed - set(df_raw.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    parse_rows = []
    for _, row in df_raw.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]).strip()
        lines = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing_line in lines:
            ing_line = ing_line.strip()
            if not ing_line or "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏" in ing_line.lower():
                continue

            # –ò—â–µ–º "100 –≥", "2 —à—Ç." –∏ —Ç.–ø.
            qty_match = re.search(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing_line, re.IGNORECASE)
            quantity = qty_match.group(0).strip() if qty_match else ""

            # group (—Å–∫–æ–±–∫–∏) –ù–ï –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é,
            # –≤—Å—ë –∞–≤—Ç–æ–ø–æ–¥–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ auto_assign_group
            # –ù–æ –µ—Å–ª–∏ user —Ö–æ—á–µ—Ç ¬´(–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)¬ª –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –æ—Å—Ç–∞–≤–∏–º:
            # –£–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —á–∞—Å—Ç–∏
            name_no_qty = re.sub(r"(\d+.*?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_line, flags=re.IGNORECASE)

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ ¬´--¬ª –∏ —Ç–æ—á–∫–∏
            name_no_qty = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", name_no_qty)
            name_no_qty = re.sub(r"\s?\.\s?$", "", name_no_qty)
            name_no_qty = name_no_qty.strip()

            # unify_ingredient_name
            ing_clean = unify_ingredient_name(name_no_qty)

            # auto_assign_group
            grp = auto_assign_group(ing_clean)

            parse_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": name_no_qty.strip(),  # –û—Ä–∏–≥–∏–Ω–∞–ª (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä?),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ì—Ä—É–ø–ø–∞": grp,
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    if not parse_rows:
        return pd.DataFrame()

    df_parsed = pd.DataFrame(parse_rows)

    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º : 1 —Ä–µ—Ü–µ–ø—Ç => 1 —Å—Ç—Ä–æ–∫–∞.
    # ingredients => list of dict
    final_recipes = []
    grouped = df_parsed.groupby("–†–µ—Ü–µ–ø—Ç")
    for rcp, subdf in grouped:
        instruct = subdf["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"].iloc[0]
        ing_list = subdf[["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ì—Ä—É–ø–ø–∞"]].to_dict(orient="records")
        final_recipes.append({
            "–†–µ—Ü–µ–ø—Ç": rcp,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": ing_list,
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruct
        })
    return pd.DataFrame(final_recipes)

######################################################
# sum_ingredients : –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, —É–º–Ω–æ–∂–∞–µ–º qty * –ø–æ—Ä—Ü–∏–∏
######################################################
def sum_ingredients(cart_df: pd.DataFrame) -> pd.DataFrame:
    rows = []
    for _, c_row in cart_df.iterrows():
        recipe_name = c_row["–†–µ—Ü–µ–ø—Ç"]
        portions = c_row["–ü–æ—Ä—Ü–∏–∏"]
        ing_list = c_row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
        if not isinstance(ing_list, list):
            continue
        for ing_item in ing_list:
            iname = ing_item["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            grp = ing_item["–ì—Ä—É–ø–ø–∞"]
            qty_str = ing_item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            base, unit = parse_quantity(qty_str)
            total = base * portions
            rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": iname,
                "–ì—Ä—É–ø–ø–∞": grp,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": total,
                "–ï–¥–∏–Ω–∏—Ü–∞": unit
            })
    if not rows:
        return pd.DataFrame()
    sumdf = pd.DataFrame(rows)
    result = sumdf.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","–ì—Ä—É–ø–ø–∞","–ï–¥–∏–Ω–∏—Ü–∞"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return result

######################################################
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
######################################################
def add_recipe_to_cart(recipe_name, portions, df_parsed):
    if "cart" not in st.session_state:
        st.session_state["cart"] = pd.DataFrame(columns=["–†–µ—Ü–µ–ø—Ç","–ü–æ—Ä—Ü–∏–∏","–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON","–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    # –ù–∞–π–¥—ë–º —Å—Ç—Ä–æ–∫—É –≤ df_parsed
    row_df = df_parsed[df_parsed["–†–µ—Ü–µ–ø—Ç"] == recipe_name]
    if row_df.empty:
        st.error("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    row = row_df.iloc[0]

    cart = st.session_state["cart"]
    exist_idx = cart[cart["–†–µ—Ü–µ–ø—Ç"] == recipe_name].index
    if len(exist_idx) > 0:
        # –£–∂–µ –µ—Å—Ç—å => —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º "–ü–æ—Ä—Ü–∏–∏"
        idx = exist_idx[0]
        old_pors = cart.loc[idx, "–ü–æ—Ä—Ü–∏–∏"]
        new_pors = old_pors + portions
        st.session_state["cart"].loc[idx, "–ü–æ—Ä—Ü–∏–∏"] = new_pors
        st.success(f"–£ ¬´{recipe_name}¬ª —Ç–µ–ø–µ—Ä—å {new_pors} –ø–æ—Ä—Ü–∏–π!")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_df = pd.DataFrame([{
            "–†–µ—Ü–µ–ø—Ç": row["–†–µ—Ü–µ–ø—Ç"],
            "–ü–æ—Ä—Ü–∏–∏": portions,
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON": row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"],
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
        }])
        st.session_state["cart"] = pd.concat([st.session_state["cart"], new_df], ignore_index=True)
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω ¬´{recipe_name}¬ª x {portions} –ø–æ—Ä—Ü–∏–π!")

def remove_recipe_from_cart(recipe_name):
    if "cart" not in st.session_state:
        return
    st.session_state["cart"] = st.session_state["cart"][st.session_state["cart"]["–†–µ—Ü–µ–ø—Ç"] != recipe_name]

######################################################
def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        st.write("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    #=== –ü–æ–∏—Å–∫
    st.header("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ing_sea = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:")
    if ing_sea:
        found = []
        for _, r in df.iterrows():
            ings = r["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
            if isinstance(ings, list):
                for iitem in ings:
                    if ing_sea.lower() in iitem["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].lower():
                        found.append(r["–†–µ—Ü–µ–ø—Ç"])
                        break
        if found:
            st.subheader("–†–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
            for rc in found:
                st.markdown(f"- **{rc}**")
        else:
            st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        st.write("---")

    #=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ (—Å —É—á—ë—Ç–æ–º –ø–æ—Ä—Ü–∏–π)")
    recipe_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    recipe_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", [""] + list(recipe_list))
    portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, max_value=50, value=1)
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
        if recipe_choice:
            add_recipe_to_cart(recipe_choice, portions, df)

    #=== –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å–ø–∏—Å–æ–∫)")
    if "cart" not in st.session_state or st.session_state["cart"].empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    else:
        cart_df = st.session_state["cart"]
        for iidx, c_row in cart_df.iterrows():
            rcp = c_row["–†–µ—Ü–µ–ø—Ç"]
            pors = c_row["–ü–æ—Ä—Ü–∏–∏"]
            st.markdown(f"- **{rcp}** (–ø–æ—Ä—Ü–∏–π: {pors})")
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å
            if st.button(f"–£–¥–∞–ª–∏—Ç—å ¬´{rcp}¬ª"):
                remove_recipe_from_cart(rcp)
                st.success(f"¬´{rcp}¬ª —É–¥–∞–ª—ë–Ω!")
                return
        st.write("---")

        # –ò—Ç–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        summ = sum_ingredients(cart_df)
        if not summ.empty:
            grouped = summ.groupby("–ì—Ä—É–ø–ø–∞")
            for grp_name in sorted(grouped.groups.keys()):
                sub_c = grouped.get_group(grp_name)
                st.markdown(f"#### {grp_name if grp_name else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'}")
                for _, srow in sub_c.iterrows():
                    iname = srow["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                    num = srow["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                    unit = srow["–ï–¥–∏–Ω–∏—Ü–∞"]
                    line = f"- **{iname}**: {num} {unit}" if unit else f"- **{iname}**: {num}"
                    st.markdown(line)
        else:
            st.write("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        st.write("---")

    #=== –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
    st.header("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
    for _, rowx in df.iterrows():
        rcpn = rowx["–†–µ—Ü–µ–ø—Ç"]
        st.markdown(f"## {rcpn}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        ings = rowx["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ãJSON"]
        if isinstance(ings, list):
            for d in ings:
                ingname = d["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                qty = d["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                sgrp = d["–ì—Ä—É–ø–ø–∞"]
                qpart = f" ‚Äî {qty}" if qty else ""
                st.markdown(f"- {ingname}{qpart}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{rowx['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")

if __name__ == "__main__":
    main()
