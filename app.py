import streamlit as st
import pandas as pd
import re

#########################################################
# –®–ê–ì 1. –°–õ–û–í–ê–†–ò –î–õ–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò
#########################################################

# SYNONYMS: –ø—Ä–∏–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫ –æ–¥–Ω–æ–º—É
SYNONYMS = {
    "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞": "–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞",
    "—è–π—Ü–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è c1)": "—è–π—Ü–∞",
    "—è–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ": "—è–π—Ü–∞",
    "—è–π—Ü–∞": "—è–π—Ü–∞",
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë —á—Ç–æ-—Ç–æ, –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞
}

# AUTO_CATEGORIES: –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ç–æ –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
# –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞, —Å—Ç–∞–≤–∏–º —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
AUTO_CATEGORIES = {
    "—Ç–≤–æ—Ä–æ–≥": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å–ª–∏–≤–∫–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "—Å—ã—Ä": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",        # —Å—É–ª—É–≥—É–Ω–∏ => —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "—Å—ã—Ä"? –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ "—Å—É–ª—É–≥—É–Ω–∏" : "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    "—Å—É–ª—É–≥—É–Ω–∏": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–æ–ª–æ–∫–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–º–∞—Å–ª–æ": "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",      # —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ
    "—è–π—Ü": "—è–π—Ü–∞",                     # "—è–π—Ü–æ", "—è–π—Ü–∞"
    "–º—É–∫–∞": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "–∫—Ä–∞—Ö–º–∞–ª": "–º—É–∫–∞ –∏ –∑–ª–∞–∫–∏",
    "—É–∫—Ä–æ–ø": "–æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "—Å–æ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–ø–µ—Ä–µ—Ü": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–≤–∞–Ω–∏–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "–º–∞–∫": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Å–∞—Ö–∞—Ä": "—Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
    "—Ñ—É–Ω–¥—É–∫": "–æ—Ä–µ—Ö–∏",
    "–º–∏–Ω–¥–∞–ª—å": "–æ—Ä–µ—Ö–∏",
    "–≤–∏—à": "—è–≥–æ–¥—ã",          # "–≤–∏—à–Ω—è"
    "—à–æ–∫–æ–ª–∞–¥": "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è",
}

#########################################################
# –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê
#########################################################
def parse_quantity(qty_str: str):
    """
    '100 –≥' -> (100.0, '–≥')
    '2 —à—Ç' -> (2.0, '—à—Ç')
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (0.0, '')
    """
    match = re.match(r"(\d+)\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞)", qty_str.strip(), re.IGNORECASE)
    if match:
        num = float(match.group(1))
        unit = match.group(2).lower()
        return (num, unit)
    return (0.0, "")

#########################################################
# –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê (SYNONYMS)
#########################################################
def unify_ingredient_name(name: str):
    """–ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã."""
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ/–æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–∏—Ä–µ –≤ –∫–æ–Ω—Ü–µ
    name = name.strip().lower()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    if name in SYNONYMS:
        return SYNONYMS[name]
    return name

#########################################################
# –ê–í–¢–û-–ü–û–î–°–¢–ê–í–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò (AUTO_CATEGORIES)
#########################################################
def auto_assign_category(ing: str):
    ing_lower = ing.lower()
    for key_sub, cat_name in AUTO_CATEGORIES.items():
        if key_sub in ing_lower:
            return cat_name
    return ""

#########################################################
# –ü–ê–†–°–ò–ú CSV (3 –ö–û–õ–û–ù–ö–ò -> 5 –ö–û–õ–û–ù–û–ö)
#########################################################
@st.cache_data
def load_and_parse(csv_path="recipes.csv"):
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()

    needed_cols = {"–†–µ—Ü–µ–ø—Ç", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    missing = needed_cols - set(df_old.columns)
    if missing:
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return pd.DataFrame()

    new_rows = []
    for _, row in df_old.iterrows():
        recipe_name = str(row["–†–µ—Ü–µ–ø—Ç"]).strip()
        instruction = str(row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        ingredients_list = str(row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).split("\n")

        for ing in ingredients_list:
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            ing_lower = ing.lower().strip()
            if ing_lower == "–¥–ª—è –Ω–∞—á–∏–Ω–∫–∏":
                continue

            # 1) –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity_match = re.search(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing, re.IGNORECASE)
            quantity = quantity_match.group(0) if quantity_match else ""

            # 2) –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö (–¥–æ–ø—É—Å—Ç–∏–º, (–∫–∞—Ç–µ–≥–æ—Ä–∏—è C1))
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # 3) –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            ing_clean = re.sub(r"\(.*?\)", "", ing, flags=re.IGNORECASE)   # —É–±–∏—Ä–∞–µ–º (...)
            ing_clean = re.sub(r"(\d+\s?(–≥|–≥—Ä|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean, flags=re.IGNORECASE)
            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–∏—Ä–µ, —Ç–æ—á–∫–∏
            ing_clean = re.sub(r"\s?[‚Äî-]{1,2}\s?$", "", ing_clean)
            ing_clean = re.sub(r"\s?\.\s?$", "", ing_clean)
            ing_clean = ing_clean.strip()

            # 4) –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—é
            ing_clean = unify_ingredient_name(ing_clean)

            # 5) –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–ø—Ä–∏—Å–≤–æ–∏—Ç—å
            if not category:
                category = auto_assign_category(ing_clean)

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name,
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    return pd.DataFrame(new_rows)

#########################################################
# –°–£–ú–ú–ò–†–£–ï–ú –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´
#########################################################
def sum_ingredients(selected_df):
    parsed_list = []
    for _, row in selected_df.iterrows():
        ing = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
        qty_str = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        num, unit = parse_quantity(qty_str)
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        cat = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        parsed_list.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ": num,
            "–ï–¥–∏–Ω–∏—Ü–∞": unit,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat
        })
    tmp_df = pd.DataFrame(parsed_list)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ [–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ï–¥–∏–Ω–∏—Ü–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è], —á—Ç–æ–±—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å—É–º–º–∏—Ä–æ–≤–∞–ª–∏—Å—å
    grouped = tmp_df.groupby(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ï–¥–∏–Ω–∏—Ü–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], as_index=False)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"].sum()
    return grouped

#########################################################
# –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
#########################################################
def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥")

    df = load_and_parse("recipes.csv")
    if df.empty:
        return

    # –ë–ª–æ–∫: –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    st.header("–°—É–º–º–∞—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    recipes_list = df["–†–µ—Ü–µ–ø—Ç"].unique().tolist()
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã:", recipes_list)

    if selected:
        selected_df = df[df["–†–µ—Ü–µ–ø—Ç"].isin(selected)]
        summed_df = sum_ingredients(selected_df)

        # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º
        st.write("### –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):")
        cat_grouped = summed_df.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        for cat_name in sorted(cat_grouped.groups.keys()):
            sub_cat = cat_grouped.get_group(cat_name)
            st.markdown(f"#### {cat_name if cat_name else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}")
            for _, row_s in sub_cat.iterrows():
                ing = row_s["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
                num = row_s["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∏—Å–ª–æ"]
                unit = row_s["–ï–¥–∏–Ω–∏—Ü–∞"]
                line = f"- **{ing}**: {num} {unit}" if unit else f"- **{ing}**: {num}"
                st.markdown(line)
        st.write("---")

    # –ë–ª–æ–∫: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    st.header("üìã –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for recipe_name, group in grouped:
        st.markdown(f"## {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, row_ing in group.iterrows():
            ing = row_ing["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"]
            qty = row_ing["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            # –ù–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º
            qty_part = f" ‚Äî {qty}" if qty else ""
            st.markdown(f"- {ing}{qty_part}")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")

if __name__ == "__main__":
    main()
