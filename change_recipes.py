import streamlit as st
import pandas as pd
import re


@st.cache_data
def load_and_transform_data(csv_path):
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π recipes.csv —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
      - –ù–∞–∑–≤–∞–Ω–∏–µ
      - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    –ò –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
      - –†–µ—Ü–µ–ø—Ç
      - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
      - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    """
    df_old = pd.read_csv(csv_path)
    df_old.columns = df_old.columns.str.strip()  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å
    needed_cols = {"–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}
    if not needed_cols.issubset(df_old.columns):
        st.error("–í —Å—Ç–∞—Ä–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: "
                 f"{needed_cols - set(df_old.columns)}")
        return pd.DataFrame()

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –ø–æ–ª–µ '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'
    # —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ '\n' (–∏–ª–∏ ';', –µ—Å–ª–∏ —Ç–∞–∫ —Ö—Ä–∞–Ω–∏–ª–∏).
    new_rows = []

    for _, row in df_old.iterrows():
        recipe_name = row["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        instruction = row["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        ingredients_list = row["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"].split("\n")  # –∏–ª–∏ split(";")

        for ing in ingredients_list:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            quantity_match = re.search(r"(\d+\s?(–≥|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", ing)
            quantity = quantity_match.group(0) if quantity_match else ""

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            category_match = re.search(r"\((.*?)\)", ing)
            category = category_match.group(1) if category_match else ""

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            ing_clean = re.sub(r"\(.*?\)", "", ing)  # —É–±–∏—Ä–∞–µ–º (... )
            ing_clean = re.sub(r"(\d+\s?(–≥|–º–ª|—à—Ç|kg|–ª|—Å—Ç\.–ª|—á\.–ª|—â–µ–ø–æ—Ç–∫–∞))", "", ing_clean)
            ing_clean = ing_clean.strip(" -")

            new_rows.append({
                "–†–µ—Ü–µ–ø—Ç": recipe_name.strip(),
                "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_clean.strip(),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity.strip(),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category.strip(),
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": instruction
            })

    df_new = pd.DataFrame(new_rows)
    return df_new


def main():
    st.title("–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ CSV)")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π CSV –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "–Ω–∞ –ª–µ—Ç—É"
    df = load_and_transform_data("recipes.csv")  # —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å

    # –ï—Å–ª–∏ DataFrame –ø—É—Å—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
    if df.empty:
        return

    st.write("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π DataFrame:", df.head(10))

    # -- –ù–∏–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å df, –∫–∞–∫ –±—É–¥—Ç–æ —É –Ω–∞—Å —Å—Ç–æ–ª–±—Ü—ã
    #    –†–µ—Ü–µ–ø—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

    st.header("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
    ingredient_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    if ingredient_search:
        filtered = df[df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.contains(ingredient_search, case=False, na=False)]
        if not filtered.empty:
            st.subheader("üçΩÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
            grouped = filtered.groupby("–†–µ—Ü–µ–ø—Ç")
            for recipe_name, group in grouped:
                st.markdown(f"## {recipe_name}")
                st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
                for _, row in group.iterrows():
                    st.markdown(f"- {row['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç']} ‚Äî {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']})")
                st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        else:
            st.write("üòî –†–µ—Ü–µ–ø—Ç—ã —Å —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.header("üìã –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    all_grouped = df.groupby("–†–µ—Ü–µ–ø—Ç")
    for recipe_name, group in all_grouped:
        st.markdown(f"### {recipe_name}")
        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
        for _, row in group.iterrows():
            st.markdown(f"- {row['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç']} ‚Äî {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']})")
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{group.iloc[0]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}")
        st.write("---")


if __name__ == "__main__":
    main()
